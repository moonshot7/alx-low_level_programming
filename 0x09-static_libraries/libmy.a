!<arch>
0-isupper.c/    0           0     0     644     187       `
#include "main.h"

/**
 * _isupper - uppercase letters
 * @c: char to check
 *
 * Return: 0 or 1
 */

int _isupper(int c)
{
	if (c >= 'A' && c <= 'Z')
		return (1);
	else
		return (0);
}

0-memset.c/     0           0     0     644     356       `
#include "main.h"
/**
 *_memset - fill a block of memory with a specific value
 *@s: starting address of memory to be filled
 *@b: the desired value
 *@n: number of bytes to be changed
 *
 *Return: changed array with new value for n bytes
 */
char *_memset(char *s, char b, unsigned int n)
{
int i = 0;

for (; n > 0; i++)
{
s[i] = b;
n--;
}
return (s);
}
0-strcat.c/     0           0     0     644     439       `
#include "main.h"

/**
 *   *_strcat - main function of the prototype
 *     *
 *       * @src: Concatenation parameter
 *         *
 *           * @dest: Concatenation parameter
 *             *
 *               * Return: dest
 */

char *_strcat(char *dest, char *src)
{
	int k, r;

	k = 0;
	r = 0;

	while (dest[k] != '\0')
	{
		k++;
	}
	while (src[r] != '\0')
	{
		dest[k] = src[r];
		k++;
		r++;
	}
	dest[k] = '\0';
	return (dest);
}


100-atoi.c/     0           0     0     644     565       `
#include "main.h"

/**
 * _atoi - converts a string to an integer
 * @s: string to be converted
 *
 * Return: the int converted from the string
 */
int _atoi(char *s)
{
int i, d, n, len, f, digit;

i = 0;
d = 0;
n = 0;
len = 0;
f = 0;
digit = 0;

while (s[len] != '\0')
	len++;

while (i < len && f == 0)
{
	if (s[i] == '-')
		++d;

	if (s[i] >= '0' && s[i] <= '9')
	{
		digit = s[i] - '0';
		if (d % 2)
			digit = -digit;
		n = n * 10 + digit;
		f = 1;
		if (s[i + 1] < '0' || s[i + 1] > '9')
			break;
		f = 0;
	}
	i++;
}

if (f == 0)
	return (0);

return (n);
}

1-isdigit.c/    0           0     0     644     198       `
#include "main.h"
/**
 * _isdigit - check if numbers are 0 - 9
 * @c: char to be checked
 *
 * Return: 0 or 1
 */

int _isdigit(int c)
{
	if (c >= '0' && c <= '9')
	return (1);
	else
	return (0);
}
1-memcpy.c/     0           0     0     644     357       `
#include "main.h"
/**
 *_memcpy - a function that copies memory area
 *@dest: memory where is stored
 *@src: memory where is copied
 *@n: number of bytes
 *
 *Return: copied memory with n byted changed
 */
char *_memcpy(char *dest, char *src, unsigned int n)
{
	int r = 0;
	int i = n;

	for (; r < i; r++)
	{
		dest[r] = src[r];
		n--;
	}
	return (dest);
}

1-strncat.c/    0           0     0     644     483       `
#include "main.h"

/**
 *   * _strncat  - the main function
 *     *
 *       * @n: Function parameter
 *         *
 *           * @src: Function parameter
 *             *
 *               * @dest: Function parammeter
 *                 *
 *                   * Return: dest
 */
char *_strncat(char *dest, char *src, int n)
{
int k, r;

k = 0;
r = 0;

while (dest[k] != '\0')
{
k++;
}
while (r < n && src[r] != '\0')
{
dest[k] = src[r];
k++;
r++;
}
dest[k] = '\0';
return (dest);
}

2-strchr.c/     0           0     0     644     237       `
#include "main.h"
/**
 * _strchr - Entry point
 * @s: input
 * @c: input
 * Return: Always 0 (Success)
 */
char *_strchr(char *s, char c)
{
	int i = 0;

	for (; s[i] >= '\0'; i++)
	{
		if (s[i] == c)
			return (&s[i]);
	}
	return (0);
}

2-strlen.c/     0           0     0     644     199       `
#include "main.h"
/**
 * _strlen - returns the length of a string
 * @s: string
 * Return: length
 */
int _strlen(char *s)
{
int longi = 0;

while (*s != '\0')
{
	longi++;
	s++;
}

return (longi);
}

2-strncpy.c/    0           0     0     644     465       `
#include "main.h"

/**
 *   * _strncpy - The main function of the code
 *     *
 *       * @src: Function parameter
 *         *
 *           * @dest: Function parameter
 *             *
 *               * @n: Function parameter
 *                 *
 *                   * Return: dest
 */
char *_strncpy(char *dest, char *src, int n)
{
int k = 0;

while (k < n && src[k] != '\0')
{
dest[k] = src[k];
k++;
}
while  (k < n)
{
dest[k] = '\0';
k++;
}
return (dest);
}

3-islower.c/    0           0     0     644     288       `
#include "main.h"
/**
 * _islower - entry point
 * Description: function that checks for lowercase character
 * @c:character to check if it islowercase
 * Return: 0-if lowercase, 1-if not
 */

int _islower(int c)
{
	if (c >= 'a' && c <= 'z')
	{
	return (1);
	}
	else
	{
	return (0);
	}
}
3-puts.c/       0           0     0     644     200       `
#include "main.h"
/**
 * _puts - prints a string, followed by a new line, to stdout
 * @str: string to print
 */
void _puts(char *str)
{
while (*str != '\0')
{
	_putchar(*str++);
}
	_putchar('\n');
}
3-strcmp.c/     0           0     0     644     378       `
#include "main.h"

/**
 *   * _strcmp - The main function
 *     *
 *       * @s1: Function parameter
 *         *
 *           * @s2: Function parameter
 *             *
 *               * Return: s1, s2
 */
int _strcmp(char *s1, char *s2)
{
int k = 0;

while (s1[k] != '\0' && s2[k] != '\0')
{
if (s1[k] != s2[k])
{
return (s1[k] - s2[k]);
								}
k++;
					}
return (0);
}
3-strspn.c/     0           0     0     644     371       `
#include "main.h"
/**
 * _strspn - Entry point
 * @s: input
 * @accept: input
 * Return: Always 0 (Success)
 */
unsigned int _strspn(char *s, char *accept)
{
	unsigned int n = 0;
	int r;

	while (*s)
	{
		for (r = 0; accept[r]; r++)
		{
			if (*s == accept[r])
			{
				n++;
				break;
			}
			else if (accept[r + 1] == '\0')
				return (n);
		}
		s++;
	}
	return (n);
}

4-isalpha.c/    0           0     0     644     209       `
#include "main.h"
/**
 * _isalpha - Checks charcter
 * @c: The charceter
 * Return: 1 for all
 */

int _isalpha(int c)

{
	if ((c >= 65 && c <= 90) || (c >= 97 && c <= 122))
	{
		return (1);
	}
	return (0);
}

4-strpbrk.c/    0           0     0     644     279       `
#include "main.h"
/**
 * _strpbrk - Entry point
 * @s: input
 * @accept: input
 * Return: Always 0 (Success)
 */
char *_strpbrk(char *s, char *accept)
{
	int k;

	while (*s)
	{
		for (k = 0; accept[k]; k++)
		{
		if (*s == accept[k])
		return (s);
		}
	s++;
	}

return ('\0');
}

5-strstr.c/     0           0     0     644     367       `
#include "main.h"
/**
 * _strstr - Entry point
 * @haystack: input
 * @needle: input
 * Return: Always 0 (Success)
 */
char *_strstr(char *haystack, char *needle)
{
	for (; *haystack != '\0'; haystack++)
	{
		char *l = haystack;
		char *p = needle;

		while (*l == *p && *p != '\0')
		{
			l++;
			p++;
		}

		if (*p == '\0')
			return (haystack);
	}

	return (0);
}

6-abs.c/        0           0     0     644     222       `
#include "main.h"


/**
 * _abs - Computers the absolute
 * @c: The number computed
 * Return: Absolute value
 */
int _abs(int c)
{
	if (c < 0)
	{
		int abs_val;


		abs_val = c * -1;
		return (abs_val);
	}
	return (c);
}
9-strcpy.c/     0           0     0     644     329       `
#include "main.h"

/**
 * char *_strcpy - a function that copies the string pointed to by src
 * @dest: copy to
 * @src: copy from
 * Return: string
 */
char *_strcpy(char *dest, char *src)
{
int l = 0;
int x = 0;

while (*(src + l) != '\0')
{
	l++;
}
for ( ; x < l ; x++)
{
	dest[x] = src[x];
}
dest[l] = '\0';
return (dest);
}

_putchar.c/     0           0     0     644     264       `
#include "main.h"
#include <unistd.h>
/**
 * _putchar - writes the character c to stdout
 * @c: The character to print
 *
 * Return: On success 1.
 * On error, -1 is returned, and errno is set appropriately.
 */
int _putchar(char c)
{
	return (write(1, &c, 1));
}
